pymunge - A Python interface to MUNGE
=====================================

Version 0.1
Project page: <https://pypi.python.org/pypi/pymunge>

Written by nomadictype <nomadictype AT tutanota.com>

=======================================================================

Description
-----------

pymunge is a Python wrapper for the C API of MUNGE, called
libmunge.  pymunge provides functions and classes to encode
and decode credentials with MUNGE, and to use and interact with
MUNGE contexts.  A working installation of MUNGE (a running
munged daemon, in particular) is required to encode and decode
credentials with pymunge.

Description of MUNGE from the MUNGE readme:
MUNGE (MUNGE Uid 'N' Gid Emporium) is an authentication service
for creating and validating credentials.  It is designed to be
highly scalable for use in an HPC cluster environment.  It allows
a process to authenticate the UID and GID of another local or
remote process within a group of hosts having common users and
groups.  These hosts form a security realm that is defined by a
shared cryptographic key.  Clients within this security realm can
create and validate credentials without the use of root privileges,
reserved ports, or platform-specific methods.

pymunge links:
  PyPI project page:    <https://pypi.python.org/pypi/pymunge>
  Official repository:  <https://github.com/nomadictype/pymunge>

MUNGE links:
  Project homepage:     <https://dun.github.io/munge/>
  Official repository:  <https://github.com/dun/munge>

=======================================================================

Install instructions
--------------------

Requirements:
* Python 3.4 or later (Python 2 is not supported.)
* MUNGE 0.5.x

There are several possible ways to install pymunge:
* To install pymunge from PyPI, simply run:
    python3 -m pip install pymunge
* Alternatively, your distribution may include pymunge as a package,
  with a name such as pymunge, python3-pymunge, or python-pymunge.
* pymunge can also be used without installation. Simply make sure
  that the PYTHONPATH environment variable points to the (top)
  pymunge directory.

=======================================================================

Getting started / Tutorial
--------------------------

This quick tutorial describes how to use the pymunge API. If you want,
you can follow along in an interactive Python 3 session; simply copy
all the code preceded by ">>>".

First of all, import the package:

>>> import pymunge

The simplest way to encode and decode credentials is to use the
pymunge.encode() and pymunge.decode() functions. For example,

>>> cred = pymunge.encode(b"some payload")
>>> cred
b'MUNGE:AwQDAA...'

The credential cred can now be sent to some other process (or passed
to the unmunge program) to decode it. For the purpose of this
tutorial, we simply decode it in the same process.

>>> payload, uid, gid, ctx = pymunge.decode(cred)
>>> payload
b'some payload'

pymunge.decode() returns 4 values: the payload that was encapsulated
within the credential, the UID/GID of the process that created the
credential, and a MUNGE context. This context can be examined to
obtain additional information about the credential:

>>> ctx.cipher_type
<CipherType.AES128: 4>
>>> ctx.encode_time
1514469923
>>> ctx.ttl
300
>>> ctx.uid_restriction
-1

(Also try running `help(ctx)` to see a list of all attributes
a context can have.)

It is possible to encode and decode within existing MUNGE
contexts. This is useful to customize the options used to
encode a credential:

>>> with pymunge.MungeContext() as ctx:
>>>     ctx.uid_restriction = 0  # allow only root to decode the credential
>>>     cred = ctx.encode(b"some other payload")

Similarly, MungeContext.decode() can be used to decode within an
existing context.

This concludes the basic tutorial. A collection of similar examples
is provided in the file pymunge_example.py distributed with pymunge.

=======================================================================

Licensing information
---------------------

Copyright (C) 2017 nomadictype <nomadictype AT tutanota.com>

Like libmunge, pymunge is dual-licensed under GPL-3 and LGPL-3.
More precisely:

pymunge is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your
option) any later version.  Additionally, you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation, either version 3
of the License, or (at your option) any later version.

pymunge is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
and GNU Lesser General Public License for more details.

You should have received a copy of the GNU General Public License
and GNU Lesser General Public License along with pymunge.  If not, see
<http://www.gnu.org/licenses/>.

